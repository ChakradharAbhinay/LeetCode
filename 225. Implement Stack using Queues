class MyStack {
private Queue<Integer> queue;
    public MyStack() {
        queue = new LinkedList<>();
    }
    
    public void push(int x) {
       queue.add(x);
       for(int i=1;i<queue.size();i++)
       queue.add(queue.remove());
        
    }
    
    public int pop() {
        return queue.remove();
    }
    
    public int top() {
        return queue.peek();
    }
    
    public boolean empty() {
        return queue.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */

//two queues method-use when you have more push 
//  import java.util.LinkedList;
// import java.util.Queue;

// class MyStack {
//     private Queue<Integer> q1;
//     private Queue<Integer> q2;

//     public MyStack() {
//         q1 = new LinkedList<>();
//         q2 = new LinkedList<>();
//     }

//     public void push(int x) {
//         q2.add(x); // 1. Push to q2

//         while (!q1.isEmpty()) { // 2. Move everything from q1 to q2
//             q2.add(q1.remove());
//         }

//         // 3. Swap the queues
//         Queue<Integer> temp = q1;
//         q1 = q2;
//         q2 = temp;
//     }

//     public int pop() {
//         return q1.remove();
//     }

//     public int top() {
//         return q1.peek();
//     }

//     public boolean empty() {
//         return q1.isEmpty();
//     }
// }
